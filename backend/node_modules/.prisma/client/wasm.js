
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  avatar: 'avatar',
  phone: 'phone',
  address: 'address',
  dateOfBirth: 'dateOfBirth',
  role: 'role',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  emailVerifiedAt: 'emailVerifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  userId: 'userId',
  classId: 'classId',
  parentIds: 'parentIds',
  admissionDate: 'admissionDate',
  academicYear: 'academicYear',
  allergies: 'allergies',
  medications: 'medications',
  emergencyMedicalContact: 'emergencyMedicalContact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  userId: 'userId',
  department: 'department',
  qualifications: 'qualifications',
  hireDate: 'hireDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  occupation: 'occupation',
  preferredContactMethod: 'preferredContactMethod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  academicYear: 'academicYear',
  room: 'room',
  maxStudents: 'maxStudents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  department: 'department',
  credits: 'credits',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  subjectId: 'subjectId',
  teacherId: 'teacherId',
  value: 'value',
  maxValue: 'maxValue',
  type: 'type',
  comment: 'comment',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  instructions: 'instructions',
  type: 'type',
  priority: 'priority',
  maxGrade: 'maxGrade',
  dueDate: 'dueDate',
  submissionFormat: 'submissionFormat',
  teacherId: 'teacherId',
  subjectId: 'subjectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssignmentSubmissionScalarFieldEnum = {
  id: 'id',
  assignmentId: 'assignmentId',
  studentId: 'studentId',
  content: 'content',
  submittedAt: 'submittedAt',
  grade: 'grade',
  feedback: 'feedback',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendanceRecordScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classId: 'classId',
  teacherId: 'teacherId',
  date: 'date',
  status: 'status',
  period: 'period',
  reason: 'reason',
  notifiedParents: 'notifiedParents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  classId: 'classId',
  teacherId: 'teacherId',
  subjectId: 'subjectId',
  room: 'room',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  academicYear: 'academicYear',
  semester: 'semester',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  recipientIds: 'recipientIds',
  subject: 'subject',
  content: 'content',
  type: 'type',
  priority: 'priority',
  read: 'read',
  parentMessageId: 'parentMessageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinancialRecordScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  type: 'type',
  amount: 'amount',
  currency: 'currency',
  dueDate: 'dueDate',
  paidDate: 'paidDate',
  status: 'status',
  description: 'description',
  paymentMethod: 'paymentMethod',
  invoiceNumber: 'invoiceNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdmissionApplicationScalarFieldEnum = {
  id: 'id',
  applicationNumber: 'applicationNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  nationality: 'nationality',
  previousSchool: 'previousSchool',
  desiredClass: 'desiredClass',
  academicYear: 'academicYear',
  specialNeeds: 'specialNeeds',
  parentId: 'parentId',
  fatherName: 'fatherName',
  fatherEmail: 'fatherEmail',
  fatherPhone: 'fatherPhone',
  fatherOccupation: 'fatherOccupation',
  motherName: 'motherName',
  motherEmail: 'motherEmail',
  motherPhone: 'motherPhone',
  motherOccupation: 'motherOccupation',
  guardianName: 'guardianName',
  guardianEmail: 'guardianEmail',
  guardianPhone: 'guardianPhone',
  familyAddress: 'familyAddress',
  status: 'status',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdmissionStepProgressScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  stepName: 'stepName',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  assignedTo: 'assignedTo',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LearningResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  subjectId: 'subjectId',
  level: 'level',
  url: 'url',
  thumbnail: 'thumbnail',
  duration: 'duration',
  tags: 'tags',
  createdById: 'createdById',
  accessLevel: 'accessLevel',
  downloadable: 'downloadable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VirtualClassScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  teacherId: 'teacherId',
  subjectId: 'subjectId',
  scheduledStart: 'scheduledStart',
  scheduledEnd: 'scheduledEnd',
  meetingUrl: 'meetingUrl',
  recordingUrl: 'recordingUrl',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VirtualClassParticipantScalarFieldEnum = {
  id: 'id',
  virtualClassId: 'virtualClassId',
  classId: 'classId'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  icon: 'icon',
  category: 'category',
  points: 'points',
  criteria: 'criteria',
  rarity: 'rarity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentAchievementScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  achievementId: 'achievementId',
  earnedDate: 'earnedDate',
  awardedBy: 'awardedBy',
  evidence: 'evidence'
};

exports.Prisma.BehaviorRecordScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  teacherId: 'teacherId',
  date: 'date',
  type: 'type',
  category: 'category',
  description: 'description',
  severity: 'severity',
  actionTaken: 'actionTaken',
  parentNotified: 'parentNotified',
  followUpRequired: 'followUpRequired',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportCardScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  academicYear: 'academicYear',
  semester: 'semester',
  overallAverage: 'overallAverage',
  rank: 'rank',
  totalStudents: 'totalStudents',
  behaviorGrade: 'behaviorGrade',
  totalDays: 'totalDays',
  presentDays: 'presentDays',
  absentDays: 'absentDays',
  lateCount: 'lateCount',
  principalComment: 'principalComment',
  generatedAt: 'generatedAt',
  generatedBy: 'generatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  recipientId: 'recipientId',
  title: 'title',
  message: 'message',
  type: 'type',
  category: 'category',
  read: 'read',
  actionRequired: 'actionRequired',
  actionUrl: 'actionUrl',
  scheduledFor: 'scheduledFor',
  channels: 'channels',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileAttachmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  originalName: 'originalName',
  url: 'url',
  type: 'type',
  size: 'size',
  uploadedBy: 'uploadedBy',
  assignmentId: 'assignmentId',
  submissionId: 'submissionId',
  messageId: 'messageId',
  admissionId: 'admissionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeacherSubjectScalarFieldEnum = {
  teacherId: 'teacherId',
  subjectId: 'subjectId'
};

exports.Prisma.TeacherClassScalarFieldEnum = {
  teacherId: 'teacherId',
  classId: 'classId',
  isMainTeacher: 'isMainTeacher'
};

exports.Prisma.ClassSubjectScalarFieldEnum = {
  classId: 'classId',
  subjectId: 'subjectId'
};

exports.Prisma.AssignmentClassScalarFieldEnum = {
  assignmentId: 'assignmentId',
  classId: 'classId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  PARENT: 'PARENT',
  ADMIN: 'ADMIN',
  STAFF: 'STAFF'
};

exports.ContactMethod = exports.$Enums.ContactMethod = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PHONE: 'PHONE'
};

exports.GradeType = exports.$Enums.GradeType = {
  HOMEWORK: 'HOMEWORK',
  TEST: 'TEST',
  QUIZ: 'QUIZ',
  PROJECT: 'PROJECT',
  EXAM: 'EXAM'
};

exports.AssignmentType = exports.$Enums.AssignmentType = {
  HOMEWORK: 'HOMEWORK',
  PROJECT: 'PROJECT',
  EXAM: 'EXAM',
  QUIZ: 'QUIZ'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.SubmissionFormat = exports.$Enums.SubmissionFormat = {
  ONLINE: 'ONLINE',
  PAPER: 'PAPER',
  BOTH: 'BOTH'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  GRADED: 'GRADED',
  LATE: 'LATE'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE',
  EXCUSED: 'EXCUSED'
};

exports.MessageType = exports.$Enums.MessageType = {
  MESSAGE: 'MESSAGE',
  ANNOUNCEMENT: 'ANNOUNCEMENT',
  ALERT: 'ALERT',
  NOTIFICATION: 'NOTIFICATION'
};

exports.FinancialType = exports.$Enums.FinancialType = {
  TUITION: 'TUITION',
  FEES: 'FEES',
  MATERIALS: 'MATERIALS',
  TRANSPORT: 'TRANSPORT',
  MEALS: 'MEALS',
  OTHER: 'OTHER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  TRANSFER: 'TRANSFER',
  CHECK: 'CHECK',
  MOBILE_MONEY: 'MOBILE_MONEY'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.AdmissionStatus = exports.$Enums.AdmissionStatus = {
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  WAITLISTED: 'WAITLISTED'
};

exports.StepStatus = exports.$Enums.StepStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  SKIPPED: 'SKIPPED'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT',
  AUDIO: 'AUDIO',
  INTERACTIVE: 'INTERACTIVE',
  QUIZ: 'QUIZ',
  GAME: 'GAME'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  PUBLIC: 'PUBLIC',
  CLASS: 'CLASS',
  SCHOOL: 'SCHOOL',
  PREMIUM: 'PREMIUM'
};

exports.VirtualClassStatus = exports.$Enums.VirtualClassStatus = {
  SCHEDULED: 'SCHEDULED',
  LIVE: 'LIVE',
  ENDED: 'ENDED',
  CANCELLED: 'CANCELLED'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  ACADEMIC: 'ACADEMIC',
  BEHAVIOR: 'BEHAVIOR',
  PARTICIPATION: 'PARTICIPATION',
  LEADERSHIP: 'LEADERSHIP',
  CREATIVITY: 'CREATIVITY'
};

exports.Rarity = exports.$Enums.Rarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  LEGENDARY: 'LEGENDARY'
};

exports.BehaviorType = exports.$Enums.BehaviorType = {
  POSITIVE: 'POSITIVE',
  NEGATIVE: 'NEGATIVE',
  NEUTRAL: 'NEUTRAL'
};

exports.BehaviorCategory = exports.$Enums.BehaviorCategory = {
  DISCIPLINE: 'DISCIPLINE',
  PARTICIPATION: 'PARTICIPATION',
  HOMEWORK: 'HOMEWORK',
  SOCIAL: 'SOCIAL',
  OTHER: 'OTHER'
};

exports.Severity = exports.$Enums.Severity = {
  MINOR: 'MINOR',
  MODERATE: 'MODERATE',
  MAJOR: 'MAJOR'
};

exports.BehaviorGrade = exports.$Enums.BehaviorGrade = {
  EXCELLENT: 'EXCELLENT',
  GOOD: 'GOOD',
  SATISFACTORY: 'SATISFACTORY',
  NEEDS_IMPROVEMENT: 'NEEDS_IMPROVEMENT'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  SUCCESS: 'SUCCESS'
};

exports.NotificationCategory = exports.$Enums.NotificationCategory = {
  ACADEMIC: 'ACADEMIC',
  ATTENDANCE: 'ATTENDANCE',
  FINANCIAL: 'FINANCIAL',
  ADMINISTRATIVE: 'ADMINISTRATIVE',
  SOCIAL: 'SOCIAL'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH: 'PUSH',
  IN_APP: 'IN_APP'
};

exports.Prisma.ModelName = {
  User: 'User',
  Student: 'Student',
  Teacher: 'Teacher',
  Parent: 'Parent',
  Admin: 'Admin',
  Class: 'Class',
  Subject: 'Subject',
  Grade: 'Grade',
  Assignment: 'Assignment',
  AssignmentSubmission: 'AssignmentSubmission',
  AttendanceRecord: 'AttendanceRecord',
  Schedule: 'Schedule',
  Message: 'Message',
  FinancialRecord: 'FinancialRecord',
  AdmissionApplication: 'AdmissionApplication',
  AdmissionStepProgress: 'AdmissionStepProgress',
  LearningResource: 'LearningResource',
  VirtualClass: 'VirtualClass',
  VirtualClassParticipant: 'VirtualClassParticipant',
  Achievement: 'Achievement',
  StudentAchievement: 'StudentAchievement',
  BehaviorRecord: 'BehaviorRecord',
  ReportCard: 'ReportCard',
  Notification: 'Notification',
  FileAttachment: 'FileAttachment',
  UserSession: 'UserSession',
  TeacherSubject: 'TeacherSubject',
  TeacherClass: 'TeacherClass',
  ClassSubject: 'ClassSubject',
  AssignmentClass: 'AssignmentClass'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
