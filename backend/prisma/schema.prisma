// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================
// MODÈLES UTILISATEURS
// ===========================

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  password        String   // Champ password ajouté
  avatar          String?
  phone           String?
  address         String?
  dateOfBirth     DateTime?
  role            UserRole
  isActive        Boolean  @default(true)
  lastLoginAt     DateTime?
  emailVerifiedAt DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations spécifiques selon le rôle
  student Student?
  teacher Teacher?
  parent  Parent?
  admin   Admin?

  // Relations communes
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageRecipient")
  notifications    Notification[]
  sessions         UserSession[]

  @@map("users")
}

model Student {
  id              String    @id @default(cuid())
  studentId       String    @unique
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  classId         String?
  class           Class?    @relation(fields: [classId], references: [id])
  parentIds       String[]
  parents         Parent[]  @relation("StudentParents")
  admissionDate   DateTime
  academicYear    String
  
  // Informations médicales
  allergies       String[]
  medications     String[]
  emergencyMedicalContact String?
  
  // Relations académiques
  grades          Grade[]
  attendanceRecords AttendanceRecord[]
  assignments     AssignmentSubmission[]
  achievements    StudentAchievement[]
  behaviorRecords BehaviorRecord[]
  financialRecords FinancialRecord[]
  reportCards     ReportCard[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("students")
}

model Teacher {
  id            String   @id @default(cuid())
  employeeId    String   @unique
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  department    String
  qualifications String[]
  hireDate      DateTime
  
  // Relations
  subjects      TeacherSubject[]
  classes       TeacherClass[]
  grades        Grade[]
  assignments   Assignment[]
  attendanceRecords AttendanceRecord[]
  schedules     Schedule[]
  virtualClasses VirtualClass[]
  resources     LearningResource[]
  behaviorRecords BehaviorRecord[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("teachers")
}

model Parent {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  children              Student[] @relation("StudentParents")
  occupation            String?
  preferredContactMethod ContactMethod @default(EMAIL)
  
  // Relations
  admissionApplications AdmissionApplication[]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("parents")
}

model Admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions String[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

// ===========================
// MODÈLES ACADÉMIQUES
// ===========================

model Class {
  id           String    @id @default(cuid())
  name         String
  level        String
  academicYear String
  room         String?
  maxStudents  Int       @default(35)
  
  // Relations
  students     Student[]
  teachers     TeacherClass[]
  subjects     ClassSubject[]
  schedules    Schedule[]
  assignments  AssignmentClass[]
  attendanceRecords AttendanceRecord[]
  virtualClasses VirtualClassParticipant[]
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("classes")
}

model Subject {
  id          String @id @default(cuid())
  name        String
  code        String @unique
  description String?
  department  String
  credits     Int    @default(1)
  color       String @default("#3B82F6")
  
  // Relations
  teachers    TeacherSubject[]
  classes     ClassSubject[]
  grades      Grade[]
  assignments Assignment[]
  schedules   Schedule[]
  resources   LearningResource[]
  virtualClasses VirtualClass[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("subjects")
}

model Grade {
  id          String    @id @default(cuid())
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subjectId   String
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  value       Float
  maxValue    Float     @default(20)
  type        GradeType
  comment     String?
  date        DateTime
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("grades")
}

model Assignment {
  id               String @id @default(cuid())
  title            String
  description      String
  instructions     String
  type             AssignmentType
  priority         Priority @default(MEDIUM)
  maxGrade         Float @default(20)
  dueDate          DateTime
  submissionFormat SubmissionFormat @default(ONLINE)
  
  // Relations
  teacherId        String
  teacher          Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subjectId        String
  subject          Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classes          AssignmentClass[]
  submissions      AssignmentSubmission[]
  attachments      FileAttachment[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("assignments")
}

model AssignmentSubmission {
  id           String    @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  content      String?
  submittedAt  DateTime?
  grade        Float?
  feedback     String?
  status       SubmissionStatus @default(PENDING)
  
  // Relations
  attachments  FileAttachment[]
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

// ===========================
// MODÈLES DE GESTION
// ===========================

model AttendanceRecord {
  id              String          @id @default(cuid())
  studentId       String
  student         Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  classId         String?
  class           Class?          @relation(fields: [classId], references: [id])
  teacherId       String
  teacher         Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  date            DateTime
  status          AttendanceStatus
  period          String?
  reason          String?
  notifiedParents Boolean         @default(false)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("attendance_records")
}

model Schedule {
  id           String @id @default(cuid())
  classId      String
  class        Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacherId    String
  teacher      Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subjectId    String
  subject      Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  room         String
  dayOfWeek    Int // 0 = Dimanche, 1 = Lundi, etc.
  startTime    String // Format HH:MM
  endTime      String // Format HH:MM
  duration     Int // en minutes
  academicYear String
  semester     String
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("schedules")
}

model Message {
  id            String      @id @default(cuid())
  senderId      String
  sender        User        @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipients    User[]      @relation("MessageRecipient")
  subject       String
  content       String
  type          MessageType @default(MESSAGE)
  priority      Priority    @default(MEDIUM)
  read          Boolean     @default(false)
  parentMessageId String?
  parentMessage Message?    @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies       Message[]   @relation("MessageReplies")
  
  // Relations
  attachments   FileAttachment[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("messages")
}

// ===========================
// MODÈLES FINANCIERS
// ===========================

model FinancialRecord {
  id             String           @id @default(cuid())
  studentId      String
  student        Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  type           FinancialType
  amount         Float
  currency       String           @default("FCFA")
  dueDate        DateTime
  paidDate       DateTime?
  status         PaymentStatus    @default(PENDING)
  description    String
  paymentMethod  PaymentMethod?
  invoiceNumber  String           @unique
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("financial_records")
}

// ===========================
// MODÈLES D'ADMISSION
// ===========================

model AdmissionApplication {
  id            String            @id @default(cuid())
  applicationNumber String        @unique
  
  // Informations de l'élève
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  gender        Gender
  nationality   String
  previousSchool String?
  desiredClass  String
  academicYear  String
  specialNeeds  String?
  
  // Informations des parents
  parentId      String?
  parent        Parent?           @relation(fields: [parentId], references: [id])
  fatherName    String
  fatherEmail   String
  fatherPhone   String
  fatherOccupation String?
  motherName    String
  motherEmail   String
  motherPhone   String
  motherOccupation String?
  guardianName  String?
  guardianEmail String?
  guardianPhone String?
  familyAddress String
  
  // Statut et suivi
  status        AdmissionStatus   @default(SUBMITTED)
  submittedAt   DateTime          @default(now())
  reviewedAt    DateTime?
  reviewedBy    String?
  notes         String?
  
  // Relations
  documents     FileAttachment[]
  stepProgress  AdmissionStepProgress[]
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("admission_applications")
}

model AdmissionStepProgress {
  id            String               @id @default(cuid())
  applicationId String
  application   AdmissionApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  stepName      String
  status        StepStatus           @default(PENDING)
  startedAt     DateTime?
  completedAt   DateTime?
  assignedTo    String?
  notes         String?
  
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@unique([applicationId, stepName])
  @@map("admission_step_progress")
}

// ===========================
// MODÈLES DE RESSOURCES
// ===========================

model LearningResource {
  id          String       @id @default(cuid())
  title       String
  description String
  type        ResourceType
  subjectId   String
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  level       String
  url         String
  thumbnail   String?
  duration    Int?         // en minutes
  tags        String[]
  createdById String
  createdBy   Teacher      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  accessLevel AccessLevel  @default(CLASS)
  downloadable Boolean     @default(false)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("learning_resources")
}

model VirtualClass {
  id            String    @id @default(cuid())
  title         String
  description   String
  teacherId     String
  teacher       Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subjectId     String
  subject       Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classes       VirtualClassParticipant[]
  scheduledStart DateTime
  scheduledEnd  DateTime
  meetingUrl    String
  recordingUrl  String?
  status        VirtualClassStatus @default(SCHEDULED)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("virtual_classes")
}

model VirtualClassParticipant {
  id             String       @id @default(cuid())
  virtualClassId String
  virtualClass   VirtualClass @relation(fields: [virtualClassId], references: [id], onDelete: Cascade)
  classId        String
  class          Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  @@unique([virtualClassId, classId])
  @@map("virtual_class_participants")
}

// ===========================
// MODÈLES DE SYSTÈME
// ===========================

model Achievement {
  id          String    @id @default(cuid())
  title       String
  description String
  icon        String
  category    AchievementCategory
  points      Int
  criteria    String[]
  rarity      Rarity    @default(COMMON)
  
  // Relations
  students    StudentAchievement[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("achievements")
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  student       Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  earnedDate    DateTime    @default(now())
  awardedBy     String
  evidence      String?
  
  @@unique([studentId, achievementId])
  @@map("student_achievements")
}

model BehaviorRecord {
  id              String        @id @default(cuid())
  studentId       String
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacherId       String
  teacher         Teacher       @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  date            DateTime
  type            BehaviorType
  category        BehaviorCategory
  description     String
  severity        Severity?
  actionTaken     String?
  parentNotified  Boolean       @default(false)
  followUpRequired Boolean      @default(false)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("behavior_records")
}

model ReportCard {
  id             String    @id @default(cuid())
  studentId      String
  student        Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  academicYear   String
  semester       String
  overallAverage Float
  rank           Int?
  totalStudents  Int?
  behaviorGrade  BehaviorGrade @default(SATISFACTORY)
  
  // Statistiques de présence
  totalDays      Int
  presentDays    Int
  absentDays     Int
  lateCount      Int
  
  // Commentaires
  principalComment String?
  
  generatedAt    DateTime
  generatedBy    String
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([studentId, academicYear, semester])
  @@map("report_cards")
}

model Notification {
  id            String              @id @default(cuid())
  recipientId   String
  recipient     User                @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  title         String
  message       String
  type          NotificationType
  category      NotificationCategory
  read          Boolean             @default(false)
  actionRequired Boolean           @default(false)
  actionUrl     String?
  scheduledFor  DateTime?
  channels      NotificationChannel[]
  
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@map("notifications")
}

model FileAttachment {
  id               String               @id @default(cuid())
  name             String
  originalName     String
  url              String
  type             String
  size             Int
  uploadedBy       String
  
  // Relations polymorphes
  assignmentId     String?
  assignment       Assignment?          @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submissionId     String?
  submission       AssignmentSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  messageId        String?
  message          Message?             @relation(fields: [messageId], references: [id], onDelete: Cascade)
  admissionId      String?
  admission        AdmissionApplication? @relation(fields: [admissionId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  @@map("file_attachments")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  deviceInfo String?
  ipAddress String?
  expiresAt DateTime
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_sessions")
}

// ===========================
// TABLES DE LIAISON
// ===========================

model TeacherSubject {
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@id([teacherId, subjectId])
  @@map("teacher_subjects")
}

model TeacherClass {
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classId   String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  isMainTeacher Boolean @default(false)
  
  @@id([teacherId, classId])
  @@map("teacher_classes")
}

model ClassSubject {
  classId   String
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@id([classId, subjectId])
  @@map("class_subjects")
}

model AssignmentClass {
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  classId      String
  class        Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  @@id([assignmentId, classId])
  @@map("assignment_classes")
}

// ===========================
// ENUMS
// ===========================

enum UserRole {
  STUDENT
  TEACHER
  PARENT
  ADMIN
  STAFF
}

enum ContactMethod {
  EMAIL
  SMS
  PHONE
}

enum GradeType {
  HOMEWORK
  TEST
  QUIZ
  PROJECT
  EXAM
}

enum AssignmentType {
  HOMEWORK
  PROJECT
  EXAM
  QUIZ
}

enum SubmissionFormat {
  ONLINE
  PAPER
  BOTH
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
  LATE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum MessageType {
  MESSAGE
  ANNOUNCEMENT
  ALERT
  NOTIFICATION
}

enum FinancialType {
  TUITION
  FEES
  MATERIALS
  TRANSPORT
  MEALS
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  CHECK
  MOBILE_MONEY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AdmissionStatus {
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WAITLISTED
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum ResourceType {
  VIDEO
  DOCUMENT
  AUDIO
  INTERACTIVE
  QUIZ
  GAME
}

enum AccessLevel {
  PUBLIC
  CLASS
  SCHOOL
  PREMIUM
}

enum VirtualClassStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}

enum AchievementCategory {
  ACADEMIC
  BEHAVIOR
  PARTICIPATION
  LEADERSHIP
  CREATIVITY
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  LEGENDARY
}

enum BehaviorType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum BehaviorCategory {
  DISCIPLINE
  PARTICIPATION
  HOMEWORK
  SOCIAL
  OTHER
}

enum Severity {
  MINOR
  MODERATE
  MAJOR
}

enum BehaviorGrade {
  EXCELLENT
  GOOD
  SATISFACTORY
  NEEDS_IMPROVEMENT
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum NotificationCategory {
  ACADEMIC
  ATTENDANCE
  FINANCIAL
  ADMINISTRATIVE
  SOCIAL
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
}
