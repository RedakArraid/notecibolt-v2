import { Router } from 'express';
import { Request, Response } from 'express';

const router = Router();

// Donn√©es mock√©es pour les tests
const mockAssignments = [
  {
    id: '1',
    title: 'Dissertation sur Voltaire',
    subject: 'Fran√ßais',
    dueDate: '2025-01-25',
    description: 'Analyser les th√®mes principaux dans Candide',
    priority: 'high',
    completed: false,
    type: 'homework',
    maxGrade: 20,
    teacherId: 'teacher-2'
  },
  {
    id: '2',
    title: 'Contr√¥le Int√©grales',
    subject: 'Math√©matiques',
    dueDate: '2025-01-22',
    description: '√âvaluation sur le calcul int√©gral',
    priority: 'high',
    completed: false,
    type: 'exam',
    maxGrade: 20,
    teacherId: 'teacher-1'
  },
  {
    id: '3',
    title: 'Oral d\'anglais',
    subject: 'Anglais',
    dueDate: '2025-01-30',
    description: 'Pr√©sentation de 10 minutes sur un sujet libre',
    priority: 'medium',
    completed: false,
    type: 'project',
    maxGrade: 20,
    teacherId: 'teacher-3'
  },
  {
    id: '4',
    title: 'TP Chimie',
    subject: 'Physique-Chimie',
    dueDate: '2025-01-20',
    description: 'Synth√®se de l\'aspirine',
    priority: 'low',
    completed: false,
    type: 'homework',
    maxGrade: 20,
    teacherId: 'teacher-1'
  }
];

// GET /api/v1/assignments/me/upcoming - Devoirs √† venir de l'utilisateur connect√©
router.get('/me/upcoming', (_req: Request, res: Response) => {
  console.log('üìù GET /api/v1/assignments/me/upcoming');
  
  // Filtrer les devoirs non termin√©s et les trier par date d'√©ch√©ance
  const upcomingAssignments = mockAssignments
    .filter(assignment => !assignment.completed)
    .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());
  
  res.json({
    success: true,
    data: upcomingAssignments,
    message: 'Devoirs √† venir r√©cup√©r√©s avec succ√®s'
  });
});

// GET /api/v1/assignments/student/:id/upcoming - Devoirs √† venir d'un √©tudiant
router.get('/student/:id/upcoming', (req: Request, res: Response) => {
  const studentId = req.params.id;
  console.log(`üìù GET /api/v1/assignments/student/${studentId}/upcoming`);
  
  const upcomingAssignments = mockAssignments
    .filter(assignment => !assignment.completed)
    .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());
  
  res.json({
    success: true,
    data: upcomingAssignments,
    message: `Devoirs √† venir de l'√©tudiant ${studentId} r√©cup√©r√©s avec succ√®s`
  });
});

// GET /api/v1/assignments/:id - D√©tails d'un devoir
router.get('/:id', (req: Request, res: Response) => {
  const assignmentId = req.params.id;
  console.log(`üìù GET /api/v1/assignments/${assignmentId}`);
  
  const assignment = mockAssignments.find(a => a.id === assignmentId);
  
  if (!assignment) {
    return res.status(404).json({
      success: false,
      message: 'Devoir non trouv√©'
    });
  }
  
  return res.json({
    success: true,
    data: assignment,
    message: 'Devoir r√©cup√©r√© avec succ√®s'
  });
});

export default router;